// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"main/ent/coffee"
	"main/ent/predicate"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCoffee = "Coffee"
)

// CoffeeMutation represents an operation that mutates the Coffee nodes in the graph.
type CoffeeMutation struct {
	config
	op               Op
	typ              string
	id               *int
	sugar            *int
	addsugar         *int
	coffee           *int
	addcoffee        *int
	powdered_milk    *int
	addpowdered_milk *int
	coffee_mate      *int
	addcoffee_mate   *int
	milk             *int
	addmilk          *int
	water            *int
	addwater         *int
	rating           *float64
	addrating        *float64
	clearedFields    map[string]struct{}
	done             bool
	oldValue         func(context.Context) (*Coffee, error)
	predicates       []predicate.Coffee
}

var _ ent.Mutation = (*CoffeeMutation)(nil)

// coffeeOption allows management of the mutation configuration using functional options.
type coffeeOption func(*CoffeeMutation)

// newCoffeeMutation creates new mutation for the Coffee entity.
func newCoffeeMutation(c config, op Op, opts ...coffeeOption) *CoffeeMutation {
	m := &CoffeeMutation{
		config:        c,
		op:            op,
		typ:           TypeCoffee,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCoffeeID sets the ID field of the mutation.
func withCoffeeID(id int) coffeeOption {
	return func(m *CoffeeMutation) {
		var (
			err   error
			once  sync.Once
			value *Coffee
		)
		m.oldValue = func(ctx context.Context) (*Coffee, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Coffee.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCoffee sets the old Coffee of the mutation.
func withCoffee(node *Coffee) coffeeOption {
	return func(m *CoffeeMutation) {
		m.oldValue = func(context.Context) (*Coffee, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CoffeeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CoffeeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CoffeeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CoffeeMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Coffee.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetSugar sets the "sugar" field.
func (m *CoffeeMutation) SetSugar(i int) {
	m.sugar = &i
	m.addsugar = nil
}

// Sugar returns the value of the "sugar" field in the mutation.
func (m *CoffeeMutation) Sugar() (r int, exists bool) {
	v := m.sugar
	if v == nil {
		return
	}
	return *v, true
}

// OldSugar returns the old "sugar" field's value of the Coffee entity.
// If the Coffee object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoffeeMutation) OldSugar(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSugar is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSugar requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSugar: %w", err)
	}
	return oldValue.Sugar, nil
}

// AddSugar adds i to the "sugar" field.
func (m *CoffeeMutation) AddSugar(i int) {
	if m.addsugar != nil {
		*m.addsugar += i
	} else {
		m.addsugar = &i
	}
}

// AddedSugar returns the value that was added to the "sugar" field in this mutation.
func (m *CoffeeMutation) AddedSugar() (r int, exists bool) {
	v := m.addsugar
	if v == nil {
		return
	}
	return *v, true
}

// ResetSugar resets all changes to the "sugar" field.
func (m *CoffeeMutation) ResetSugar() {
	m.sugar = nil
	m.addsugar = nil
}

// SetCoffee sets the "coffee" field.
func (m *CoffeeMutation) SetCoffee(i int) {
	m.coffee = &i
	m.addcoffee = nil
}

// Coffee returns the value of the "coffee" field in the mutation.
func (m *CoffeeMutation) Coffee() (r int, exists bool) {
	v := m.coffee
	if v == nil {
		return
	}
	return *v, true
}

// OldCoffee returns the old "coffee" field's value of the Coffee entity.
// If the Coffee object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoffeeMutation) OldCoffee(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCoffee is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCoffee requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCoffee: %w", err)
	}
	return oldValue.Coffee, nil
}

// AddCoffee adds i to the "coffee" field.
func (m *CoffeeMutation) AddCoffee(i int) {
	if m.addcoffee != nil {
		*m.addcoffee += i
	} else {
		m.addcoffee = &i
	}
}

// AddedCoffee returns the value that was added to the "coffee" field in this mutation.
func (m *CoffeeMutation) AddedCoffee() (r int, exists bool) {
	v := m.addcoffee
	if v == nil {
		return
	}
	return *v, true
}

// ResetCoffee resets all changes to the "coffee" field.
func (m *CoffeeMutation) ResetCoffee() {
	m.coffee = nil
	m.addcoffee = nil
}

// SetPowderedMilk sets the "powdered_milk" field.
func (m *CoffeeMutation) SetPowderedMilk(i int) {
	m.powdered_milk = &i
	m.addpowdered_milk = nil
}

// PowderedMilk returns the value of the "powdered_milk" field in the mutation.
func (m *CoffeeMutation) PowderedMilk() (r int, exists bool) {
	v := m.powdered_milk
	if v == nil {
		return
	}
	return *v, true
}

// OldPowderedMilk returns the old "powdered_milk" field's value of the Coffee entity.
// If the Coffee object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoffeeMutation) OldPowderedMilk(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPowderedMilk is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPowderedMilk requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPowderedMilk: %w", err)
	}
	return oldValue.PowderedMilk, nil
}

// AddPowderedMilk adds i to the "powdered_milk" field.
func (m *CoffeeMutation) AddPowderedMilk(i int) {
	if m.addpowdered_milk != nil {
		*m.addpowdered_milk += i
	} else {
		m.addpowdered_milk = &i
	}
}

// AddedPowderedMilk returns the value that was added to the "powdered_milk" field in this mutation.
func (m *CoffeeMutation) AddedPowderedMilk() (r int, exists bool) {
	v := m.addpowdered_milk
	if v == nil {
		return
	}
	return *v, true
}

// ResetPowderedMilk resets all changes to the "powdered_milk" field.
func (m *CoffeeMutation) ResetPowderedMilk() {
	m.powdered_milk = nil
	m.addpowdered_milk = nil
}

// SetCoffeeMate sets the "coffee_mate" field.
func (m *CoffeeMutation) SetCoffeeMate(i int) {
	m.coffee_mate = &i
	m.addcoffee_mate = nil
}

// CoffeeMate returns the value of the "coffee_mate" field in the mutation.
func (m *CoffeeMutation) CoffeeMate() (r int, exists bool) {
	v := m.coffee_mate
	if v == nil {
		return
	}
	return *v, true
}

// OldCoffeeMate returns the old "coffee_mate" field's value of the Coffee entity.
// If the Coffee object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoffeeMutation) OldCoffeeMate(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCoffeeMate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCoffeeMate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCoffeeMate: %w", err)
	}
	return oldValue.CoffeeMate, nil
}

// AddCoffeeMate adds i to the "coffee_mate" field.
func (m *CoffeeMutation) AddCoffeeMate(i int) {
	if m.addcoffee_mate != nil {
		*m.addcoffee_mate += i
	} else {
		m.addcoffee_mate = &i
	}
}

// AddedCoffeeMate returns the value that was added to the "coffee_mate" field in this mutation.
func (m *CoffeeMutation) AddedCoffeeMate() (r int, exists bool) {
	v := m.addcoffee_mate
	if v == nil {
		return
	}
	return *v, true
}

// ResetCoffeeMate resets all changes to the "coffee_mate" field.
func (m *CoffeeMutation) ResetCoffeeMate() {
	m.coffee_mate = nil
	m.addcoffee_mate = nil
}

// SetMilk sets the "milk" field.
func (m *CoffeeMutation) SetMilk(i int) {
	m.milk = &i
	m.addmilk = nil
}

// Milk returns the value of the "milk" field in the mutation.
func (m *CoffeeMutation) Milk() (r int, exists bool) {
	v := m.milk
	if v == nil {
		return
	}
	return *v, true
}

// OldMilk returns the old "milk" field's value of the Coffee entity.
// If the Coffee object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoffeeMutation) OldMilk(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMilk is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMilk requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMilk: %w", err)
	}
	return oldValue.Milk, nil
}

// AddMilk adds i to the "milk" field.
func (m *CoffeeMutation) AddMilk(i int) {
	if m.addmilk != nil {
		*m.addmilk += i
	} else {
		m.addmilk = &i
	}
}

// AddedMilk returns the value that was added to the "milk" field in this mutation.
func (m *CoffeeMutation) AddedMilk() (r int, exists bool) {
	v := m.addmilk
	if v == nil {
		return
	}
	return *v, true
}

// ResetMilk resets all changes to the "milk" field.
func (m *CoffeeMutation) ResetMilk() {
	m.milk = nil
	m.addmilk = nil
}

// SetWater sets the "water" field.
func (m *CoffeeMutation) SetWater(i int) {
	m.water = &i
	m.addwater = nil
}

// Water returns the value of the "water" field in the mutation.
func (m *CoffeeMutation) Water() (r int, exists bool) {
	v := m.water
	if v == nil {
		return
	}
	return *v, true
}

// OldWater returns the old "water" field's value of the Coffee entity.
// If the Coffee object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoffeeMutation) OldWater(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWater is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWater requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWater: %w", err)
	}
	return oldValue.Water, nil
}

// AddWater adds i to the "water" field.
func (m *CoffeeMutation) AddWater(i int) {
	if m.addwater != nil {
		*m.addwater += i
	} else {
		m.addwater = &i
	}
}

// AddedWater returns the value that was added to the "water" field in this mutation.
func (m *CoffeeMutation) AddedWater() (r int, exists bool) {
	v := m.addwater
	if v == nil {
		return
	}
	return *v, true
}

// ResetWater resets all changes to the "water" field.
func (m *CoffeeMutation) ResetWater() {
	m.water = nil
	m.addwater = nil
}

// SetRating sets the "rating" field.
func (m *CoffeeMutation) SetRating(f float64) {
	m.rating = &f
	m.addrating = nil
}

// Rating returns the value of the "rating" field in the mutation.
func (m *CoffeeMutation) Rating() (r float64, exists bool) {
	v := m.rating
	if v == nil {
		return
	}
	return *v, true
}

// OldRating returns the old "rating" field's value of the Coffee entity.
// If the Coffee object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CoffeeMutation) OldRating(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRating is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRating requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRating: %w", err)
	}
	return oldValue.Rating, nil
}

// AddRating adds f to the "rating" field.
func (m *CoffeeMutation) AddRating(f float64) {
	if m.addrating != nil {
		*m.addrating += f
	} else {
		m.addrating = &f
	}
}

// AddedRating returns the value that was added to the "rating" field in this mutation.
func (m *CoffeeMutation) AddedRating() (r float64, exists bool) {
	v := m.addrating
	if v == nil {
		return
	}
	return *v, true
}

// ResetRating resets all changes to the "rating" field.
func (m *CoffeeMutation) ResetRating() {
	m.rating = nil
	m.addrating = nil
}

// Where appends a list predicates to the CoffeeMutation builder.
func (m *CoffeeMutation) Where(ps ...predicate.Coffee) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CoffeeMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CoffeeMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Coffee, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CoffeeMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CoffeeMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Coffee).
func (m *CoffeeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CoffeeMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.sugar != nil {
		fields = append(fields, coffee.FieldSugar)
	}
	if m.coffee != nil {
		fields = append(fields, coffee.FieldCoffee)
	}
	if m.powdered_milk != nil {
		fields = append(fields, coffee.FieldPowderedMilk)
	}
	if m.coffee_mate != nil {
		fields = append(fields, coffee.FieldCoffeeMate)
	}
	if m.milk != nil {
		fields = append(fields, coffee.FieldMilk)
	}
	if m.water != nil {
		fields = append(fields, coffee.FieldWater)
	}
	if m.rating != nil {
		fields = append(fields, coffee.FieldRating)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CoffeeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case coffee.FieldSugar:
		return m.Sugar()
	case coffee.FieldCoffee:
		return m.Coffee()
	case coffee.FieldPowderedMilk:
		return m.PowderedMilk()
	case coffee.FieldCoffeeMate:
		return m.CoffeeMate()
	case coffee.FieldMilk:
		return m.Milk()
	case coffee.FieldWater:
		return m.Water()
	case coffee.FieldRating:
		return m.Rating()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CoffeeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case coffee.FieldSugar:
		return m.OldSugar(ctx)
	case coffee.FieldCoffee:
		return m.OldCoffee(ctx)
	case coffee.FieldPowderedMilk:
		return m.OldPowderedMilk(ctx)
	case coffee.FieldCoffeeMate:
		return m.OldCoffeeMate(ctx)
	case coffee.FieldMilk:
		return m.OldMilk(ctx)
	case coffee.FieldWater:
		return m.OldWater(ctx)
	case coffee.FieldRating:
		return m.OldRating(ctx)
	}
	return nil, fmt.Errorf("unknown Coffee field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CoffeeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case coffee.FieldSugar:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSugar(v)
		return nil
	case coffee.FieldCoffee:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCoffee(v)
		return nil
	case coffee.FieldPowderedMilk:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPowderedMilk(v)
		return nil
	case coffee.FieldCoffeeMate:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCoffeeMate(v)
		return nil
	case coffee.FieldMilk:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMilk(v)
		return nil
	case coffee.FieldWater:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWater(v)
		return nil
	case coffee.FieldRating:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRating(v)
		return nil
	}
	return fmt.Errorf("unknown Coffee field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CoffeeMutation) AddedFields() []string {
	var fields []string
	if m.addsugar != nil {
		fields = append(fields, coffee.FieldSugar)
	}
	if m.addcoffee != nil {
		fields = append(fields, coffee.FieldCoffee)
	}
	if m.addpowdered_milk != nil {
		fields = append(fields, coffee.FieldPowderedMilk)
	}
	if m.addcoffee_mate != nil {
		fields = append(fields, coffee.FieldCoffeeMate)
	}
	if m.addmilk != nil {
		fields = append(fields, coffee.FieldMilk)
	}
	if m.addwater != nil {
		fields = append(fields, coffee.FieldWater)
	}
	if m.addrating != nil {
		fields = append(fields, coffee.FieldRating)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CoffeeMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case coffee.FieldSugar:
		return m.AddedSugar()
	case coffee.FieldCoffee:
		return m.AddedCoffee()
	case coffee.FieldPowderedMilk:
		return m.AddedPowderedMilk()
	case coffee.FieldCoffeeMate:
		return m.AddedCoffeeMate()
	case coffee.FieldMilk:
		return m.AddedMilk()
	case coffee.FieldWater:
		return m.AddedWater()
	case coffee.FieldRating:
		return m.AddedRating()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CoffeeMutation) AddField(name string, value ent.Value) error {
	switch name {
	case coffee.FieldSugar:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSugar(v)
		return nil
	case coffee.FieldCoffee:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCoffee(v)
		return nil
	case coffee.FieldPowderedMilk:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPowderedMilk(v)
		return nil
	case coffee.FieldCoffeeMate:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCoffeeMate(v)
		return nil
	case coffee.FieldMilk:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddMilk(v)
		return nil
	case coffee.FieldWater:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddWater(v)
		return nil
	case coffee.FieldRating:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRating(v)
		return nil
	}
	return fmt.Errorf("unknown Coffee numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CoffeeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CoffeeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CoffeeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Coffee nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CoffeeMutation) ResetField(name string) error {
	switch name {
	case coffee.FieldSugar:
		m.ResetSugar()
		return nil
	case coffee.FieldCoffee:
		m.ResetCoffee()
		return nil
	case coffee.FieldPowderedMilk:
		m.ResetPowderedMilk()
		return nil
	case coffee.FieldCoffeeMate:
		m.ResetCoffeeMate()
		return nil
	case coffee.FieldMilk:
		m.ResetMilk()
		return nil
	case coffee.FieldWater:
		m.ResetWater()
		return nil
	case coffee.FieldRating:
		m.ResetRating()
		return nil
	}
	return fmt.Errorf("unknown Coffee field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CoffeeMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CoffeeMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CoffeeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CoffeeMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CoffeeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CoffeeMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CoffeeMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Coffee unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CoffeeMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Coffee edge %s", name)
}
