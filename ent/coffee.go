// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"main/ent/coffee"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Coffee is the model entity for the Coffee schema.
type Coffee struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Sugar holds the value of the "sugar" field.
	Sugar int `json:"sugar,omitempty"`
	// Coffee holds the value of the "coffee" field.
	Coffee int `json:"coffee,omitempty"`
	// PowderedMilk holds the value of the "powdered_milk" field.
	PowderedMilk int `json:"powdered_milk,omitempty"`
	// CoffeeMate holds the value of the "coffee_mate" field.
	CoffeeMate int `json:"coffee_mate,omitempty"`
	// Milk holds the value of the "milk" field.
	Milk int `json:"milk,omitempty"`
	// Water holds the value of the "water" field.
	Water int `json:"water,omitempty"`
	// Rating holds the value of the "rating" field.
	Rating       float64 `json:"rating,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Coffee) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case coffee.FieldRating:
			values[i] = new(sql.NullFloat64)
		case coffee.FieldID, coffee.FieldSugar, coffee.FieldCoffee, coffee.FieldPowderedMilk, coffee.FieldCoffeeMate, coffee.FieldMilk, coffee.FieldWater:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Coffee fields.
func (c *Coffee) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case coffee.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case coffee.FieldSugar:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sugar", values[i])
			} else if value.Valid {
				c.Sugar = int(value.Int64)
			}
		case coffee.FieldCoffee:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field coffee", values[i])
			} else if value.Valid {
				c.Coffee = int(value.Int64)
			}
		case coffee.FieldPowderedMilk:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field powdered_milk", values[i])
			} else if value.Valid {
				c.PowderedMilk = int(value.Int64)
			}
		case coffee.FieldCoffeeMate:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field coffee_mate", values[i])
			} else if value.Valid {
				c.CoffeeMate = int(value.Int64)
			}
		case coffee.FieldMilk:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field milk", values[i])
			} else if value.Valid {
				c.Milk = int(value.Int64)
			}
		case coffee.FieldWater:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field water", values[i])
			} else if value.Valid {
				c.Water = int(value.Int64)
			}
		case coffee.FieldRating:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field rating", values[i])
			} else if value.Valid {
				c.Rating = value.Float64
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Coffee.
// This includes values selected through modifiers, order, etc.
func (c *Coffee) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// Update returns a builder for updating this Coffee.
// Note that you need to call Coffee.Unwrap() before calling this method if this Coffee
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Coffee) Update() *CoffeeUpdateOne {
	return NewCoffeeClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Coffee entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Coffee) Unwrap() *Coffee {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Coffee is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Coffee) String() string {
	var builder strings.Builder
	builder.WriteString("Coffee(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("sugar=")
	builder.WriteString(fmt.Sprintf("%v", c.Sugar))
	builder.WriteString(", ")
	builder.WriteString("coffee=")
	builder.WriteString(fmt.Sprintf("%v", c.Coffee))
	builder.WriteString(", ")
	builder.WriteString("powdered_milk=")
	builder.WriteString(fmt.Sprintf("%v", c.PowderedMilk))
	builder.WriteString(", ")
	builder.WriteString("coffee_mate=")
	builder.WriteString(fmt.Sprintf("%v", c.CoffeeMate))
	builder.WriteString(", ")
	builder.WriteString("milk=")
	builder.WriteString(fmt.Sprintf("%v", c.Milk))
	builder.WriteString(", ")
	builder.WriteString("water=")
	builder.WriteString(fmt.Sprintf("%v", c.Water))
	builder.WriteString(", ")
	builder.WriteString("rating=")
	builder.WriteString(fmt.Sprintf("%v", c.Rating))
	builder.WriteByte(')')
	return builder.String()
}

// Coffees is a parsable slice of Coffee.
type Coffees []*Coffee
