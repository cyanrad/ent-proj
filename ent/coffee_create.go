// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"main/ent/coffee"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CoffeeCreate is the builder for creating a Coffee entity.
type CoffeeCreate struct {
	config
	mutation *CoffeeMutation
	hooks    []Hook
}

// SetSugar sets the "sugar" field.
func (cc *CoffeeCreate) SetSugar(i int) *CoffeeCreate {
	cc.mutation.SetSugar(i)
	return cc
}

// SetCoffee sets the "coffee" field.
func (cc *CoffeeCreate) SetCoffee(i int) *CoffeeCreate {
	cc.mutation.SetCoffee(i)
	return cc
}

// SetPowderedMilk sets the "powdered_milk" field.
func (cc *CoffeeCreate) SetPowderedMilk(i int) *CoffeeCreate {
	cc.mutation.SetPowderedMilk(i)
	return cc
}

// SetCoffeeMate sets the "coffee_mate" field.
func (cc *CoffeeCreate) SetCoffeeMate(i int) *CoffeeCreate {
	cc.mutation.SetCoffeeMate(i)
	return cc
}

// SetMilk sets the "milk" field.
func (cc *CoffeeCreate) SetMilk(i int) *CoffeeCreate {
	cc.mutation.SetMilk(i)
	return cc
}

// SetWater sets the "water" field.
func (cc *CoffeeCreate) SetWater(i int) *CoffeeCreate {
	cc.mutation.SetWater(i)
	return cc
}

// SetRating sets the "rating" field.
func (cc *CoffeeCreate) SetRating(f float64) *CoffeeCreate {
	cc.mutation.SetRating(f)
	return cc
}

// Mutation returns the CoffeeMutation object of the builder.
func (cc *CoffeeCreate) Mutation() *CoffeeMutation {
	return cc.mutation
}

// Save creates the Coffee in the database.
func (cc *CoffeeCreate) Save(ctx context.Context) (*Coffee, error) {
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CoffeeCreate) SaveX(ctx context.Context) *Coffee {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CoffeeCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CoffeeCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CoffeeCreate) check() error {
	if _, ok := cc.mutation.Sugar(); !ok {
		return &ValidationError{Name: "sugar", err: errors.New(`ent: missing required field "Coffee.sugar"`)}
	}
	if v, ok := cc.mutation.Sugar(); ok {
		if err := coffee.SugarValidator(v); err != nil {
			return &ValidationError{Name: "sugar", err: fmt.Errorf(`ent: validator failed for field "Coffee.sugar": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Coffee(); !ok {
		return &ValidationError{Name: "coffee", err: errors.New(`ent: missing required field "Coffee.coffee"`)}
	}
	if v, ok := cc.mutation.Coffee(); ok {
		if err := coffee.CoffeeValidator(v); err != nil {
			return &ValidationError{Name: "coffee", err: fmt.Errorf(`ent: validator failed for field "Coffee.coffee": %w`, err)}
		}
	}
	if _, ok := cc.mutation.PowderedMilk(); !ok {
		return &ValidationError{Name: "powdered_milk", err: errors.New(`ent: missing required field "Coffee.powdered_milk"`)}
	}
	if v, ok := cc.mutation.PowderedMilk(); ok {
		if err := coffee.PowderedMilkValidator(v); err != nil {
			return &ValidationError{Name: "powdered_milk", err: fmt.Errorf(`ent: validator failed for field "Coffee.powdered_milk": %w`, err)}
		}
	}
	if _, ok := cc.mutation.CoffeeMate(); !ok {
		return &ValidationError{Name: "coffee_mate", err: errors.New(`ent: missing required field "Coffee.coffee_mate"`)}
	}
	if v, ok := cc.mutation.CoffeeMate(); ok {
		if err := coffee.CoffeeMateValidator(v); err != nil {
			return &ValidationError{Name: "coffee_mate", err: fmt.Errorf(`ent: validator failed for field "Coffee.coffee_mate": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Milk(); !ok {
		return &ValidationError{Name: "milk", err: errors.New(`ent: missing required field "Coffee.milk"`)}
	}
	if v, ok := cc.mutation.Milk(); ok {
		if err := coffee.MilkValidator(v); err != nil {
			return &ValidationError{Name: "milk", err: fmt.Errorf(`ent: validator failed for field "Coffee.milk": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Water(); !ok {
		return &ValidationError{Name: "water", err: errors.New(`ent: missing required field "Coffee.water"`)}
	}
	if v, ok := cc.mutation.Water(); ok {
		if err := coffee.WaterValidator(v); err != nil {
			return &ValidationError{Name: "water", err: fmt.Errorf(`ent: validator failed for field "Coffee.water": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Rating(); !ok {
		return &ValidationError{Name: "rating", err: errors.New(`ent: missing required field "Coffee.rating"`)}
	}
	if v, ok := cc.mutation.Rating(); ok {
		if err := coffee.RatingValidator(v); err != nil {
			return &ValidationError{Name: "rating", err: fmt.Errorf(`ent: validator failed for field "Coffee.rating": %w`, err)}
		}
	}
	return nil
}

func (cc *CoffeeCreate) sqlSave(ctx context.Context) (*Coffee, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CoffeeCreate) createSpec() (*Coffee, *sqlgraph.CreateSpec) {
	var (
		_node = &Coffee{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(coffee.Table, sqlgraph.NewFieldSpec(coffee.FieldID, field.TypeInt))
	)
	if value, ok := cc.mutation.Sugar(); ok {
		_spec.SetField(coffee.FieldSugar, field.TypeInt, value)
		_node.Sugar = value
	}
	if value, ok := cc.mutation.Coffee(); ok {
		_spec.SetField(coffee.FieldCoffee, field.TypeInt, value)
		_node.Coffee = value
	}
	if value, ok := cc.mutation.PowderedMilk(); ok {
		_spec.SetField(coffee.FieldPowderedMilk, field.TypeInt, value)
		_node.PowderedMilk = value
	}
	if value, ok := cc.mutation.CoffeeMate(); ok {
		_spec.SetField(coffee.FieldCoffeeMate, field.TypeInt, value)
		_node.CoffeeMate = value
	}
	if value, ok := cc.mutation.Milk(); ok {
		_spec.SetField(coffee.FieldMilk, field.TypeInt, value)
		_node.Milk = value
	}
	if value, ok := cc.mutation.Water(); ok {
		_spec.SetField(coffee.FieldWater, field.TypeInt, value)
		_node.Water = value
	}
	if value, ok := cc.mutation.Rating(); ok {
		_spec.SetField(coffee.FieldRating, field.TypeFloat64, value)
		_node.Rating = value
	}
	return _node, _spec
}

// CoffeeCreateBulk is the builder for creating many Coffee entities in bulk.
type CoffeeCreateBulk struct {
	config
	builders []*CoffeeCreate
}

// Save creates the Coffee entities in the database.
func (ccb *CoffeeCreateBulk) Save(ctx context.Context) ([]*Coffee, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Coffee, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CoffeeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CoffeeCreateBulk) SaveX(ctx context.Context) []*Coffee {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CoffeeCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CoffeeCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
