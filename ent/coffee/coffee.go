// Code generated by ent, DO NOT EDIT.

package coffee

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the coffee type in the database.
	Label = "coffee"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSugar holds the string denoting the sugar field in the database.
	FieldSugar = "sugar"
	// FieldCoffee holds the string denoting the coffee field in the database.
	FieldCoffee = "coffee"
	// FieldPowderedMilk holds the string denoting the powdered_milk field in the database.
	FieldPowderedMilk = "powdered_milk"
	// FieldCoffeeMate holds the string denoting the coffee_mate field in the database.
	FieldCoffeeMate = "coffee_mate"
	// FieldMilk holds the string denoting the milk field in the database.
	FieldMilk = "milk"
	// FieldWater holds the string denoting the water field in the database.
	FieldWater = "water"
	// FieldRating holds the string denoting the rating field in the database.
	FieldRating = "rating"
	// Table holds the table name of the coffee in the database.
	Table = "coffees"
)

// Columns holds all SQL columns for coffee fields.
var Columns = []string{
	FieldID,
	FieldSugar,
	FieldCoffee,
	FieldPowderedMilk,
	FieldCoffeeMate,
	FieldMilk,
	FieldWater,
	FieldRating,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// SugarValidator is a validator for the "sugar" field. It is called by the builders before save.
	SugarValidator func(int) error
	// CoffeeValidator is a validator for the "coffee" field. It is called by the builders before save.
	CoffeeValidator func(int) error
	// PowderedMilkValidator is a validator for the "powdered_milk" field. It is called by the builders before save.
	PowderedMilkValidator func(int) error
	// CoffeeMateValidator is a validator for the "coffee_mate" field. It is called by the builders before save.
	CoffeeMateValidator func(int) error
	// MilkValidator is a validator for the "milk" field. It is called by the builders before save.
	MilkValidator func(int) error
	// WaterValidator is a validator for the "water" field. It is called by the builders before save.
	WaterValidator func(int) error
	// RatingValidator is a validator for the "rating" field. It is called by the builders before save.
	RatingValidator func(float64) error
)

// OrderOption defines the ordering options for the Coffee queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySugar orders the results by the sugar field.
func BySugar(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSugar, opts...).ToFunc()
}

// ByCoffee orders the results by the coffee field.
func ByCoffee(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCoffee, opts...).ToFunc()
}

// ByPowderedMilk orders the results by the powdered_milk field.
func ByPowderedMilk(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPowderedMilk, opts...).ToFunc()
}

// ByCoffeeMate orders the results by the coffee_mate field.
func ByCoffeeMate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCoffeeMate, opts...).ToFunc()
}

// ByMilk orders the results by the milk field.
func ByMilk(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMilk, opts...).ToFunc()
}

// ByWater orders the results by the water field.
func ByWater(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWater, opts...).ToFunc()
}

// ByRating orders the results by the rating field.
func ByRating(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRating, opts...).ToFunc()
}
