// Code generated by ent, DO NOT EDIT.

package coffee

import (
	"main/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Coffee {
	return predicate.Coffee(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Coffee {
	return predicate.Coffee(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Coffee {
	return predicate.Coffee(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Coffee {
	return predicate.Coffee(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Coffee {
	return predicate.Coffee(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Coffee {
	return predicate.Coffee(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Coffee {
	return predicate.Coffee(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Coffee {
	return predicate.Coffee(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Coffee {
	return predicate.Coffee(sql.FieldLTE(FieldID, id))
}

// Sugar applies equality check predicate on the "sugar" field. It's identical to SugarEQ.
func Sugar(v int) predicate.Coffee {
	return predicate.Coffee(sql.FieldEQ(FieldSugar, v))
}

// Coffee applies equality check predicate on the "coffee" field. It's identical to CoffeeEQ.
func Coffee(v int) predicate.Coffee {
	return predicate.Coffee(sql.FieldEQ(FieldCoffee, v))
}

// PowderedMilk applies equality check predicate on the "powdered_milk" field. It's identical to PowderedMilkEQ.
func PowderedMilk(v int) predicate.Coffee {
	return predicate.Coffee(sql.FieldEQ(FieldPowderedMilk, v))
}

// CoffeeMate applies equality check predicate on the "coffee_mate" field. It's identical to CoffeeMateEQ.
func CoffeeMate(v int) predicate.Coffee {
	return predicate.Coffee(sql.FieldEQ(FieldCoffeeMate, v))
}

// Milk applies equality check predicate on the "milk" field. It's identical to MilkEQ.
func Milk(v int) predicate.Coffee {
	return predicate.Coffee(sql.FieldEQ(FieldMilk, v))
}

// Water applies equality check predicate on the "water" field. It's identical to WaterEQ.
func Water(v int) predicate.Coffee {
	return predicate.Coffee(sql.FieldEQ(FieldWater, v))
}

// Rating applies equality check predicate on the "rating" field. It's identical to RatingEQ.
func Rating(v float64) predicate.Coffee {
	return predicate.Coffee(sql.FieldEQ(FieldRating, v))
}

// SugarEQ applies the EQ predicate on the "sugar" field.
func SugarEQ(v int) predicate.Coffee {
	return predicate.Coffee(sql.FieldEQ(FieldSugar, v))
}

// SugarNEQ applies the NEQ predicate on the "sugar" field.
func SugarNEQ(v int) predicate.Coffee {
	return predicate.Coffee(sql.FieldNEQ(FieldSugar, v))
}

// SugarIn applies the In predicate on the "sugar" field.
func SugarIn(vs ...int) predicate.Coffee {
	return predicate.Coffee(sql.FieldIn(FieldSugar, vs...))
}

// SugarNotIn applies the NotIn predicate on the "sugar" field.
func SugarNotIn(vs ...int) predicate.Coffee {
	return predicate.Coffee(sql.FieldNotIn(FieldSugar, vs...))
}

// SugarGT applies the GT predicate on the "sugar" field.
func SugarGT(v int) predicate.Coffee {
	return predicate.Coffee(sql.FieldGT(FieldSugar, v))
}

// SugarGTE applies the GTE predicate on the "sugar" field.
func SugarGTE(v int) predicate.Coffee {
	return predicate.Coffee(sql.FieldGTE(FieldSugar, v))
}

// SugarLT applies the LT predicate on the "sugar" field.
func SugarLT(v int) predicate.Coffee {
	return predicate.Coffee(sql.FieldLT(FieldSugar, v))
}

// SugarLTE applies the LTE predicate on the "sugar" field.
func SugarLTE(v int) predicate.Coffee {
	return predicate.Coffee(sql.FieldLTE(FieldSugar, v))
}

// CoffeeEQ applies the EQ predicate on the "coffee" field.
func CoffeeEQ(v int) predicate.Coffee {
	return predicate.Coffee(sql.FieldEQ(FieldCoffee, v))
}

// CoffeeNEQ applies the NEQ predicate on the "coffee" field.
func CoffeeNEQ(v int) predicate.Coffee {
	return predicate.Coffee(sql.FieldNEQ(FieldCoffee, v))
}

// CoffeeIn applies the In predicate on the "coffee" field.
func CoffeeIn(vs ...int) predicate.Coffee {
	return predicate.Coffee(sql.FieldIn(FieldCoffee, vs...))
}

// CoffeeNotIn applies the NotIn predicate on the "coffee" field.
func CoffeeNotIn(vs ...int) predicate.Coffee {
	return predicate.Coffee(sql.FieldNotIn(FieldCoffee, vs...))
}

// CoffeeGT applies the GT predicate on the "coffee" field.
func CoffeeGT(v int) predicate.Coffee {
	return predicate.Coffee(sql.FieldGT(FieldCoffee, v))
}

// CoffeeGTE applies the GTE predicate on the "coffee" field.
func CoffeeGTE(v int) predicate.Coffee {
	return predicate.Coffee(sql.FieldGTE(FieldCoffee, v))
}

// CoffeeLT applies the LT predicate on the "coffee" field.
func CoffeeLT(v int) predicate.Coffee {
	return predicate.Coffee(sql.FieldLT(FieldCoffee, v))
}

// CoffeeLTE applies the LTE predicate on the "coffee" field.
func CoffeeLTE(v int) predicate.Coffee {
	return predicate.Coffee(sql.FieldLTE(FieldCoffee, v))
}

// PowderedMilkEQ applies the EQ predicate on the "powdered_milk" field.
func PowderedMilkEQ(v int) predicate.Coffee {
	return predicate.Coffee(sql.FieldEQ(FieldPowderedMilk, v))
}

// PowderedMilkNEQ applies the NEQ predicate on the "powdered_milk" field.
func PowderedMilkNEQ(v int) predicate.Coffee {
	return predicate.Coffee(sql.FieldNEQ(FieldPowderedMilk, v))
}

// PowderedMilkIn applies the In predicate on the "powdered_milk" field.
func PowderedMilkIn(vs ...int) predicate.Coffee {
	return predicate.Coffee(sql.FieldIn(FieldPowderedMilk, vs...))
}

// PowderedMilkNotIn applies the NotIn predicate on the "powdered_milk" field.
func PowderedMilkNotIn(vs ...int) predicate.Coffee {
	return predicate.Coffee(sql.FieldNotIn(FieldPowderedMilk, vs...))
}

// PowderedMilkGT applies the GT predicate on the "powdered_milk" field.
func PowderedMilkGT(v int) predicate.Coffee {
	return predicate.Coffee(sql.FieldGT(FieldPowderedMilk, v))
}

// PowderedMilkGTE applies the GTE predicate on the "powdered_milk" field.
func PowderedMilkGTE(v int) predicate.Coffee {
	return predicate.Coffee(sql.FieldGTE(FieldPowderedMilk, v))
}

// PowderedMilkLT applies the LT predicate on the "powdered_milk" field.
func PowderedMilkLT(v int) predicate.Coffee {
	return predicate.Coffee(sql.FieldLT(FieldPowderedMilk, v))
}

// PowderedMilkLTE applies the LTE predicate on the "powdered_milk" field.
func PowderedMilkLTE(v int) predicate.Coffee {
	return predicate.Coffee(sql.FieldLTE(FieldPowderedMilk, v))
}

// CoffeeMateEQ applies the EQ predicate on the "coffee_mate" field.
func CoffeeMateEQ(v int) predicate.Coffee {
	return predicate.Coffee(sql.FieldEQ(FieldCoffeeMate, v))
}

// CoffeeMateNEQ applies the NEQ predicate on the "coffee_mate" field.
func CoffeeMateNEQ(v int) predicate.Coffee {
	return predicate.Coffee(sql.FieldNEQ(FieldCoffeeMate, v))
}

// CoffeeMateIn applies the In predicate on the "coffee_mate" field.
func CoffeeMateIn(vs ...int) predicate.Coffee {
	return predicate.Coffee(sql.FieldIn(FieldCoffeeMate, vs...))
}

// CoffeeMateNotIn applies the NotIn predicate on the "coffee_mate" field.
func CoffeeMateNotIn(vs ...int) predicate.Coffee {
	return predicate.Coffee(sql.FieldNotIn(FieldCoffeeMate, vs...))
}

// CoffeeMateGT applies the GT predicate on the "coffee_mate" field.
func CoffeeMateGT(v int) predicate.Coffee {
	return predicate.Coffee(sql.FieldGT(FieldCoffeeMate, v))
}

// CoffeeMateGTE applies the GTE predicate on the "coffee_mate" field.
func CoffeeMateGTE(v int) predicate.Coffee {
	return predicate.Coffee(sql.FieldGTE(FieldCoffeeMate, v))
}

// CoffeeMateLT applies the LT predicate on the "coffee_mate" field.
func CoffeeMateLT(v int) predicate.Coffee {
	return predicate.Coffee(sql.FieldLT(FieldCoffeeMate, v))
}

// CoffeeMateLTE applies the LTE predicate on the "coffee_mate" field.
func CoffeeMateLTE(v int) predicate.Coffee {
	return predicate.Coffee(sql.FieldLTE(FieldCoffeeMate, v))
}

// MilkEQ applies the EQ predicate on the "milk" field.
func MilkEQ(v int) predicate.Coffee {
	return predicate.Coffee(sql.FieldEQ(FieldMilk, v))
}

// MilkNEQ applies the NEQ predicate on the "milk" field.
func MilkNEQ(v int) predicate.Coffee {
	return predicate.Coffee(sql.FieldNEQ(FieldMilk, v))
}

// MilkIn applies the In predicate on the "milk" field.
func MilkIn(vs ...int) predicate.Coffee {
	return predicate.Coffee(sql.FieldIn(FieldMilk, vs...))
}

// MilkNotIn applies the NotIn predicate on the "milk" field.
func MilkNotIn(vs ...int) predicate.Coffee {
	return predicate.Coffee(sql.FieldNotIn(FieldMilk, vs...))
}

// MilkGT applies the GT predicate on the "milk" field.
func MilkGT(v int) predicate.Coffee {
	return predicate.Coffee(sql.FieldGT(FieldMilk, v))
}

// MilkGTE applies the GTE predicate on the "milk" field.
func MilkGTE(v int) predicate.Coffee {
	return predicate.Coffee(sql.FieldGTE(FieldMilk, v))
}

// MilkLT applies the LT predicate on the "milk" field.
func MilkLT(v int) predicate.Coffee {
	return predicate.Coffee(sql.FieldLT(FieldMilk, v))
}

// MilkLTE applies the LTE predicate on the "milk" field.
func MilkLTE(v int) predicate.Coffee {
	return predicate.Coffee(sql.FieldLTE(FieldMilk, v))
}

// WaterEQ applies the EQ predicate on the "water" field.
func WaterEQ(v int) predicate.Coffee {
	return predicate.Coffee(sql.FieldEQ(FieldWater, v))
}

// WaterNEQ applies the NEQ predicate on the "water" field.
func WaterNEQ(v int) predicate.Coffee {
	return predicate.Coffee(sql.FieldNEQ(FieldWater, v))
}

// WaterIn applies the In predicate on the "water" field.
func WaterIn(vs ...int) predicate.Coffee {
	return predicate.Coffee(sql.FieldIn(FieldWater, vs...))
}

// WaterNotIn applies the NotIn predicate on the "water" field.
func WaterNotIn(vs ...int) predicate.Coffee {
	return predicate.Coffee(sql.FieldNotIn(FieldWater, vs...))
}

// WaterGT applies the GT predicate on the "water" field.
func WaterGT(v int) predicate.Coffee {
	return predicate.Coffee(sql.FieldGT(FieldWater, v))
}

// WaterGTE applies the GTE predicate on the "water" field.
func WaterGTE(v int) predicate.Coffee {
	return predicate.Coffee(sql.FieldGTE(FieldWater, v))
}

// WaterLT applies the LT predicate on the "water" field.
func WaterLT(v int) predicate.Coffee {
	return predicate.Coffee(sql.FieldLT(FieldWater, v))
}

// WaterLTE applies the LTE predicate on the "water" field.
func WaterLTE(v int) predicate.Coffee {
	return predicate.Coffee(sql.FieldLTE(FieldWater, v))
}

// RatingEQ applies the EQ predicate on the "rating" field.
func RatingEQ(v float64) predicate.Coffee {
	return predicate.Coffee(sql.FieldEQ(FieldRating, v))
}

// RatingNEQ applies the NEQ predicate on the "rating" field.
func RatingNEQ(v float64) predicate.Coffee {
	return predicate.Coffee(sql.FieldNEQ(FieldRating, v))
}

// RatingIn applies the In predicate on the "rating" field.
func RatingIn(vs ...float64) predicate.Coffee {
	return predicate.Coffee(sql.FieldIn(FieldRating, vs...))
}

// RatingNotIn applies the NotIn predicate on the "rating" field.
func RatingNotIn(vs ...float64) predicate.Coffee {
	return predicate.Coffee(sql.FieldNotIn(FieldRating, vs...))
}

// RatingGT applies the GT predicate on the "rating" field.
func RatingGT(v float64) predicate.Coffee {
	return predicate.Coffee(sql.FieldGT(FieldRating, v))
}

// RatingGTE applies the GTE predicate on the "rating" field.
func RatingGTE(v float64) predicate.Coffee {
	return predicate.Coffee(sql.FieldGTE(FieldRating, v))
}

// RatingLT applies the LT predicate on the "rating" field.
func RatingLT(v float64) predicate.Coffee {
	return predicate.Coffee(sql.FieldLT(FieldRating, v))
}

// RatingLTE applies the LTE predicate on the "rating" field.
func RatingLTE(v float64) predicate.Coffee {
	return predicate.Coffee(sql.FieldLTE(FieldRating, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Coffee) predicate.Coffee {
	return predicate.Coffee(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Coffee) predicate.Coffee {
	return predicate.Coffee(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Coffee) predicate.Coffee {
	return predicate.Coffee(func(s *sql.Selector) {
		p(s.Not())
	})
}
