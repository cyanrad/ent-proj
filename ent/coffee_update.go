// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"main/ent/coffee"
	"main/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CoffeeUpdate is the builder for updating Coffee entities.
type CoffeeUpdate struct {
	config
	hooks    []Hook
	mutation *CoffeeMutation
}

// Where appends a list predicates to the CoffeeUpdate builder.
func (cu *CoffeeUpdate) Where(ps ...predicate.Coffee) *CoffeeUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetSugar sets the "sugar" field.
func (cu *CoffeeUpdate) SetSugar(i int) *CoffeeUpdate {
	cu.mutation.ResetSugar()
	cu.mutation.SetSugar(i)
	return cu
}

// AddSugar adds i to the "sugar" field.
func (cu *CoffeeUpdate) AddSugar(i int) *CoffeeUpdate {
	cu.mutation.AddSugar(i)
	return cu
}

// SetCoffee sets the "coffee" field.
func (cu *CoffeeUpdate) SetCoffee(i int) *CoffeeUpdate {
	cu.mutation.ResetCoffee()
	cu.mutation.SetCoffee(i)
	return cu
}

// AddCoffee adds i to the "coffee" field.
func (cu *CoffeeUpdate) AddCoffee(i int) *CoffeeUpdate {
	cu.mutation.AddCoffee(i)
	return cu
}

// SetPowderedMilk sets the "powdered_milk" field.
func (cu *CoffeeUpdate) SetPowderedMilk(i int) *CoffeeUpdate {
	cu.mutation.ResetPowderedMilk()
	cu.mutation.SetPowderedMilk(i)
	return cu
}

// AddPowderedMilk adds i to the "powdered_milk" field.
func (cu *CoffeeUpdate) AddPowderedMilk(i int) *CoffeeUpdate {
	cu.mutation.AddPowderedMilk(i)
	return cu
}

// SetCoffeeMate sets the "coffee_mate" field.
func (cu *CoffeeUpdate) SetCoffeeMate(i int) *CoffeeUpdate {
	cu.mutation.ResetCoffeeMate()
	cu.mutation.SetCoffeeMate(i)
	return cu
}

// AddCoffeeMate adds i to the "coffee_mate" field.
func (cu *CoffeeUpdate) AddCoffeeMate(i int) *CoffeeUpdate {
	cu.mutation.AddCoffeeMate(i)
	return cu
}

// SetMilk sets the "milk" field.
func (cu *CoffeeUpdate) SetMilk(i int) *CoffeeUpdate {
	cu.mutation.ResetMilk()
	cu.mutation.SetMilk(i)
	return cu
}

// AddMilk adds i to the "milk" field.
func (cu *CoffeeUpdate) AddMilk(i int) *CoffeeUpdate {
	cu.mutation.AddMilk(i)
	return cu
}

// SetWater sets the "water" field.
func (cu *CoffeeUpdate) SetWater(i int) *CoffeeUpdate {
	cu.mutation.ResetWater()
	cu.mutation.SetWater(i)
	return cu
}

// AddWater adds i to the "water" field.
func (cu *CoffeeUpdate) AddWater(i int) *CoffeeUpdate {
	cu.mutation.AddWater(i)
	return cu
}

// SetRating sets the "rating" field.
func (cu *CoffeeUpdate) SetRating(f float64) *CoffeeUpdate {
	cu.mutation.ResetRating()
	cu.mutation.SetRating(f)
	return cu
}

// AddRating adds f to the "rating" field.
func (cu *CoffeeUpdate) AddRating(f float64) *CoffeeUpdate {
	cu.mutation.AddRating(f)
	return cu
}

// Mutation returns the CoffeeMutation object of the builder.
func (cu *CoffeeUpdate) Mutation() *CoffeeMutation {
	return cu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CoffeeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CoffeeUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CoffeeUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CoffeeUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CoffeeUpdate) check() error {
	if v, ok := cu.mutation.Sugar(); ok {
		if err := coffee.SugarValidator(v); err != nil {
			return &ValidationError{Name: "sugar", err: fmt.Errorf(`ent: validator failed for field "Coffee.sugar": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Coffee(); ok {
		if err := coffee.CoffeeValidator(v); err != nil {
			return &ValidationError{Name: "coffee", err: fmt.Errorf(`ent: validator failed for field "Coffee.coffee": %w`, err)}
		}
	}
	if v, ok := cu.mutation.PowderedMilk(); ok {
		if err := coffee.PowderedMilkValidator(v); err != nil {
			return &ValidationError{Name: "powdered_milk", err: fmt.Errorf(`ent: validator failed for field "Coffee.powdered_milk": %w`, err)}
		}
	}
	if v, ok := cu.mutation.CoffeeMate(); ok {
		if err := coffee.CoffeeMateValidator(v); err != nil {
			return &ValidationError{Name: "coffee_mate", err: fmt.Errorf(`ent: validator failed for field "Coffee.coffee_mate": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Milk(); ok {
		if err := coffee.MilkValidator(v); err != nil {
			return &ValidationError{Name: "milk", err: fmt.Errorf(`ent: validator failed for field "Coffee.milk": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Water(); ok {
		if err := coffee.WaterValidator(v); err != nil {
			return &ValidationError{Name: "water", err: fmt.Errorf(`ent: validator failed for field "Coffee.water": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Rating(); ok {
		if err := coffee.RatingValidator(v); err != nil {
			return &ValidationError{Name: "rating", err: fmt.Errorf(`ent: validator failed for field "Coffee.rating": %w`, err)}
		}
	}
	return nil
}

func (cu *CoffeeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(coffee.Table, coffee.Columns, sqlgraph.NewFieldSpec(coffee.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Sugar(); ok {
		_spec.SetField(coffee.FieldSugar, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedSugar(); ok {
		_spec.AddField(coffee.FieldSugar, field.TypeInt, value)
	}
	if value, ok := cu.mutation.Coffee(); ok {
		_spec.SetField(coffee.FieldCoffee, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedCoffee(); ok {
		_spec.AddField(coffee.FieldCoffee, field.TypeInt, value)
	}
	if value, ok := cu.mutation.PowderedMilk(); ok {
		_spec.SetField(coffee.FieldPowderedMilk, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedPowderedMilk(); ok {
		_spec.AddField(coffee.FieldPowderedMilk, field.TypeInt, value)
	}
	if value, ok := cu.mutation.CoffeeMate(); ok {
		_spec.SetField(coffee.FieldCoffeeMate, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedCoffeeMate(); ok {
		_spec.AddField(coffee.FieldCoffeeMate, field.TypeInt, value)
	}
	if value, ok := cu.mutation.Milk(); ok {
		_spec.SetField(coffee.FieldMilk, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedMilk(); ok {
		_spec.AddField(coffee.FieldMilk, field.TypeInt, value)
	}
	if value, ok := cu.mutation.Water(); ok {
		_spec.SetField(coffee.FieldWater, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedWater(); ok {
		_spec.AddField(coffee.FieldWater, field.TypeInt, value)
	}
	if value, ok := cu.mutation.Rating(); ok {
		_spec.SetField(coffee.FieldRating, field.TypeFloat64, value)
	}
	if value, ok := cu.mutation.AddedRating(); ok {
		_spec.AddField(coffee.FieldRating, field.TypeFloat64, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{coffee.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CoffeeUpdateOne is the builder for updating a single Coffee entity.
type CoffeeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CoffeeMutation
}

// SetSugar sets the "sugar" field.
func (cuo *CoffeeUpdateOne) SetSugar(i int) *CoffeeUpdateOne {
	cuo.mutation.ResetSugar()
	cuo.mutation.SetSugar(i)
	return cuo
}

// AddSugar adds i to the "sugar" field.
func (cuo *CoffeeUpdateOne) AddSugar(i int) *CoffeeUpdateOne {
	cuo.mutation.AddSugar(i)
	return cuo
}

// SetCoffee sets the "coffee" field.
func (cuo *CoffeeUpdateOne) SetCoffee(i int) *CoffeeUpdateOne {
	cuo.mutation.ResetCoffee()
	cuo.mutation.SetCoffee(i)
	return cuo
}

// AddCoffee adds i to the "coffee" field.
func (cuo *CoffeeUpdateOne) AddCoffee(i int) *CoffeeUpdateOne {
	cuo.mutation.AddCoffee(i)
	return cuo
}

// SetPowderedMilk sets the "powdered_milk" field.
func (cuo *CoffeeUpdateOne) SetPowderedMilk(i int) *CoffeeUpdateOne {
	cuo.mutation.ResetPowderedMilk()
	cuo.mutation.SetPowderedMilk(i)
	return cuo
}

// AddPowderedMilk adds i to the "powdered_milk" field.
func (cuo *CoffeeUpdateOne) AddPowderedMilk(i int) *CoffeeUpdateOne {
	cuo.mutation.AddPowderedMilk(i)
	return cuo
}

// SetCoffeeMate sets the "coffee_mate" field.
func (cuo *CoffeeUpdateOne) SetCoffeeMate(i int) *CoffeeUpdateOne {
	cuo.mutation.ResetCoffeeMate()
	cuo.mutation.SetCoffeeMate(i)
	return cuo
}

// AddCoffeeMate adds i to the "coffee_mate" field.
func (cuo *CoffeeUpdateOne) AddCoffeeMate(i int) *CoffeeUpdateOne {
	cuo.mutation.AddCoffeeMate(i)
	return cuo
}

// SetMilk sets the "milk" field.
func (cuo *CoffeeUpdateOne) SetMilk(i int) *CoffeeUpdateOne {
	cuo.mutation.ResetMilk()
	cuo.mutation.SetMilk(i)
	return cuo
}

// AddMilk adds i to the "milk" field.
func (cuo *CoffeeUpdateOne) AddMilk(i int) *CoffeeUpdateOne {
	cuo.mutation.AddMilk(i)
	return cuo
}

// SetWater sets the "water" field.
func (cuo *CoffeeUpdateOne) SetWater(i int) *CoffeeUpdateOne {
	cuo.mutation.ResetWater()
	cuo.mutation.SetWater(i)
	return cuo
}

// AddWater adds i to the "water" field.
func (cuo *CoffeeUpdateOne) AddWater(i int) *CoffeeUpdateOne {
	cuo.mutation.AddWater(i)
	return cuo
}

// SetRating sets the "rating" field.
func (cuo *CoffeeUpdateOne) SetRating(f float64) *CoffeeUpdateOne {
	cuo.mutation.ResetRating()
	cuo.mutation.SetRating(f)
	return cuo
}

// AddRating adds f to the "rating" field.
func (cuo *CoffeeUpdateOne) AddRating(f float64) *CoffeeUpdateOne {
	cuo.mutation.AddRating(f)
	return cuo
}

// Mutation returns the CoffeeMutation object of the builder.
func (cuo *CoffeeUpdateOne) Mutation() *CoffeeMutation {
	return cuo.mutation
}

// Where appends a list predicates to the CoffeeUpdate builder.
func (cuo *CoffeeUpdateOne) Where(ps ...predicate.Coffee) *CoffeeUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CoffeeUpdateOne) Select(field string, fields ...string) *CoffeeUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Coffee entity.
func (cuo *CoffeeUpdateOne) Save(ctx context.Context) (*Coffee, error) {
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CoffeeUpdateOne) SaveX(ctx context.Context) *Coffee {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CoffeeUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CoffeeUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CoffeeUpdateOne) check() error {
	if v, ok := cuo.mutation.Sugar(); ok {
		if err := coffee.SugarValidator(v); err != nil {
			return &ValidationError{Name: "sugar", err: fmt.Errorf(`ent: validator failed for field "Coffee.sugar": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Coffee(); ok {
		if err := coffee.CoffeeValidator(v); err != nil {
			return &ValidationError{Name: "coffee", err: fmt.Errorf(`ent: validator failed for field "Coffee.coffee": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.PowderedMilk(); ok {
		if err := coffee.PowderedMilkValidator(v); err != nil {
			return &ValidationError{Name: "powdered_milk", err: fmt.Errorf(`ent: validator failed for field "Coffee.powdered_milk": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.CoffeeMate(); ok {
		if err := coffee.CoffeeMateValidator(v); err != nil {
			return &ValidationError{Name: "coffee_mate", err: fmt.Errorf(`ent: validator failed for field "Coffee.coffee_mate": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Milk(); ok {
		if err := coffee.MilkValidator(v); err != nil {
			return &ValidationError{Name: "milk", err: fmt.Errorf(`ent: validator failed for field "Coffee.milk": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Water(); ok {
		if err := coffee.WaterValidator(v); err != nil {
			return &ValidationError{Name: "water", err: fmt.Errorf(`ent: validator failed for field "Coffee.water": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Rating(); ok {
		if err := coffee.RatingValidator(v); err != nil {
			return &ValidationError{Name: "rating", err: fmt.Errorf(`ent: validator failed for field "Coffee.rating": %w`, err)}
		}
	}
	return nil
}

func (cuo *CoffeeUpdateOne) sqlSave(ctx context.Context) (_node *Coffee, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(coffee.Table, coffee.Columns, sqlgraph.NewFieldSpec(coffee.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Coffee.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, coffee.FieldID)
		for _, f := range fields {
			if !coffee.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != coffee.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Sugar(); ok {
		_spec.SetField(coffee.FieldSugar, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedSugar(); ok {
		_spec.AddField(coffee.FieldSugar, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.Coffee(); ok {
		_spec.SetField(coffee.FieldCoffee, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedCoffee(); ok {
		_spec.AddField(coffee.FieldCoffee, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.PowderedMilk(); ok {
		_spec.SetField(coffee.FieldPowderedMilk, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedPowderedMilk(); ok {
		_spec.AddField(coffee.FieldPowderedMilk, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.CoffeeMate(); ok {
		_spec.SetField(coffee.FieldCoffeeMate, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedCoffeeMate(); ok {
		_spec.AddField(coffee.FieldCoffeeMate, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.Milk(); ok {
		_spec.SetField(coffee.FieldMilk, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedMilk(); ok {
		_spec.AddField(coffee.FieldMilk, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.Water(); ok {
		_spec.SetField(coffee.FieldWater, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedWater(); ok {
		_spec.AddField(coffee.FieldWater, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.Rating(); ok {
		_spec.SetField(coffee.FieldRating, field.TypeFloat64, value)
	}
	if value, ok := cuo.mutation.AddedRating(); ok {
		_spec.AddField(coffee.FieldRating, field.TypeFloat64, value)
	}
	_node = &Coffee{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{coffee.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
